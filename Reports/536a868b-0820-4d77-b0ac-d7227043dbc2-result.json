{"name": "In Clinic-Verify Prime member is able to submit the request for the Covid test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Appium unexpectedly ended the connection. It may have quit abnormally.", "trace": "self = <tests_Sollis_MVP.test_InClinic_CovidTestAppointment.Test_InClinicCovidTestAppointment object at 0x000001934D807190>, setup = None\nLoginpageDataloader = ('prameela.b@lancesoft.com', 'Password1234$')\n\n    @allure.title(\"In Clinic-Verify Prime member is able to submit the request for the Covid test\")\n    def test_InClinicCovidCare_VerifyAppointmentCreationForCovidTestForPrimeMember(self, setup, LoginpageDataloader):\n        #try:\n            base = BaseClass(self.driver)\n            base.signin(setup)\n            base.Login(LoginpageDataloader)\n            scheduleApp = ScheduleAppClinic(self.driver)\n            time.sleep(2)\n            scheduleApp.NavigateToScheduleAppointmentPage().click()\n            header = scheduleApp.headerInClinic().text\n            if (header == \"In-Clinic\"):\n                assert True\n            else:\n                allure.attach(self.driver.get_screenshot_as_png(), name=\"test_Appointment1\",\n                              attachment_type=AttachmentType.PNG)\n                assert False\n            scheduleApp.getCovidCarelinkclinic().click()\n            common = CommonMethod(self.driver)\n            common.getAppointmentConfirmPopup()\n            service = SelectServiceClinic(self.driver)\n            common.verifySelectServiceclinicPageCovidTesting()\n            service.getSubmitButtonAtSelectSelection().click()\n            common.verifyPrimaryMemberName()\n>           common.verify_Bydefault_userLocation_slots_clinic_for_vaccinaton(\"NY\")\n\ntests_Sollis_MVP\\test_InClinic_CovidTestAppointment.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutility\\ScheduleCommonMethods.py:134: in verify_Bydefault_userLocation_slots_clinic_for_vaccinaton\n    common.waitUntilLoadIframe()\nutility\\ScheduleCommonMethods.py:366: in waitUntilLoadIframe\n    WebDriverWait(self.driver, 15).until(EC.visibility_of_element_located((By.XPATH,\"//iframe[@title='map']\")))\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:128: in __call__\n    return _element_if_visible(_find_element(driver, self.locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: in _find_element\n    raise e\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001934E29D090>\nresponse = {'status': 500, 'value': '{\"sessionId\":null,\"status\":-1,\"value\":{\"error\":\"Appium response failed\",\"message\":\"Appium unexpectedly ended the connection. It may have quit abnormally.\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Appium unexpectedly ended the connection. It may have quit abnormally.\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "parameters": [{"name": "LoginpageDataloader", "value": "('prameela.b@lancesoft.com', 'Password1234$')"}], "start": 1658483570667, "stop": 1658483718704, "uuid": "731a83f4-8acf-435f-af4c-b3d17f37bfbf", "historyId": "34624cfd584c85399e2be26b8e5450e1", "testCaseId": "9c12e2f73cd340ea2379af92802cf4ee", "fullName": "tests_Sollis_MVP.test_InClinic_CovidTestAppointment.Test_InClinicCovidTestAppointment#test_InClinicCovidCare_VerifyAppointmentCreationForCovidTestForPrimeMember", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests_Sollis_MVP"}, {"name": "suite", "value": "test_InClinic_CovidTestAppointment"}, {"name": "subSuite", "value": "Test_InClinicCovidTestAppointment"}, {"name": "host", "value": "HYD-ChetanB"}, {"name": "thread", "value": "17020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_Sollis_MVP.test_InClinic_CovidTestAppointment"}]}